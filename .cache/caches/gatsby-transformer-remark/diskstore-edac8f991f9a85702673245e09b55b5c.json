{"expireTime":9007200807784120000,"key":"transformer-remark-markdown-ast-149a801874c24067bcda8642964a760c-gatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-abbrgatsby-remark-images-","val":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"Whatâ€™s REACTO?","position":{"start":{"line":1,"column":4,"offset":3},"end":{"line":1,"column":18,"offset":17},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":18,"offset":17},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The interview process for software engineers often time requires the interviewee to stand in front of a white board and code out a solution to a prompt that is given to them by the interviewer. These interviews often require knowledge of Big O (time and space complexity), Data Structures, and Algorithms. REACTO is an approach to successfully conquer these interviews. It stands for:","position":{"start":{"line":3,"column":1,"offset":19},"end":{"line":3,"column":385,"offset":403},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":19},"end":{"line":3,"column":385,"offset":403},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":false,"children":[{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"R","position":{"start":{"line":5,"column":5,"offset":409},"end":{"line":5,"column":6,"offset":410},"indent":[]}}],"position":{"start":{"line":5,"column":3,"offset":407},"end":{"line":5,"column":8,"offset":412},"indent":[]}},{"type":"text","value":"epeat: Repeat the question back to the interviewer.","position":{"start":{"line":5,"column":8,"offset":412},"end":{"line":5,"column":59,"offset":463},"indent":[]}}],"position":{"start":{"line":5,"column":3,"offset":407},"end":{"line":5,"column":59,"offset":463},"indent":[]}}],"position":{"start":{"line":5,"column":1,"offset":405},"end":{"line":5,"column":59,"offset":463},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"E","position":{"start":{"line":6,"column":5,"offset":468},"end":{"line":6,"column":6,"offset":469},"indent":[]}}],"position":{"start":{"line":6,"column":3,"offset":466},"end":{"line":6,"column":8,"offset":471},"indent":[]}},{"type":"text","value":"xamples: Give some example cases","position":{"start":{"line":6,"column":8,"offset":471},"end":{"line":6,"column":40,"offset":503},"indent":[]}}],"position":{"start":{"line":6,"column":3,"offset":466},"end":{"line":6,"column":40,"offset":503},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":464},"end":{"line":6,"column":40,"offset":503},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"A","position":{"start":{"line":7,"column":5,"offset":508},"end":{"line":7,"column":6,"offset":509},"indent":[]}}],"position":{"start":{"line":7,"column":3,"offset":506},"end":{"line":7,"column":8,"offset":511},"indent":[]}},{"type":"text","value":"pproach: Talk through your approach to solving the problem","position":{"start":{"line":7,"column":8,"offset":511},"end":{"line":7,"column":66,"offset":569},"indent":[]}}],"position":{"start":{"line":7,"column":3,"offset":506},"end":{"line":7,"column":66,"offset":569},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":504},"end":{"line":7,"column":66,"offset":569},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"C","position":{"start":{"line":8,"column":5,"offset":574},"end":{"line":8,"column":6,"offset":575},"indent":[]}}],"position":{"start":{"line":8,"column":3,"offset":572},"end":{"line":8,"column":8,"offset":577},"indent":[]}},{"type":"text","value":"ode: Code out a solution","position":{"start":{"line":8,"column":8,"offset":577},"end":{"line":8,"column":32,"offset":601},"indent":[]}}],"position":{"start":{"line":8,"column":3,"offset":572},"end":{"line":8,"column":32,"offset":601},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":570},"end":{"line":8,"column":32,"offset":601},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"T","position":{"start":{"line":9,"column":5,"offset":606},"end":{"line":9,"column":6,"offset":607},"indent":[]}}],"position":{"start":{"line":9,"column":3,"offset":604},"end":{"line":9,"column":8,"offset":609},"indent":[]}},{"type":"text","value":"est: Test the solution & edge cases","position":{"start":{"line":9,"column":8,"offset":609},"end":{"line":9,"column":43,"offset":644},"indent":[]}}],"position":{"start":{"line":9,"column":3,"offset":604},"end":{"line":9,"column":43,"offset":644},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":602},"end":{"line":9,"column":43,"offset":644},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"O","position":{"start":{"line":10,"column":5,"offset":649},"end":{"line":10,"column":6,"offset":650},"indent":[]}}],"position":{"start":{"line":10,"column":3,"offset":647},"end":{"line":10,"column":8,"offset":652},"indent":[]}},{"type":"text","value":"ptimize: Optimize while thinking about Big O","position":{"start":{"line":10,"column":8,"offset":652},"end":{"line":10,"column":52,"offset":696},"indent":[]}}],"position":{"start":{"line":10,"column":3,"offset":647},"end":{"line":10,"column":52,"offset":696},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":645},"end":{"line":10,"column":52,"offset":696},"indent":[]}}],"position":{"start":{"line":5,"column":1,"offset":405},"end":{"line":10,"column":52,"offset":696},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This series of posts will give you a problem to solve and an explanation of both the brute force & optimized solutions. We hope you enjoy!","position":{"start":{"line":12,"column":1,"offset":698},"end":{"line":12,"column":139,"offset":836},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":698},"end":{"line":12,"column":139,"offset":836},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"K-Messed Array Sort","position":{"start":{"line":14,"column":4,"offset":841},"end":{"line":14,"column":23,"offset":860},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":838},"end":{"line":14,"column":23,"offset":860},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"See ","position":{"start":{"line":16,"column":5,"offset":866},"end":{"line":16,"column":9,"offset":870},"indent":[]}},{"type":"link","title":null,"url":"https://repl.it/@sarahzhao25/kMessedSortedArray","children":[{"type":"text","value":"Repl","position":{"start":{"line":16,"column":10,"offset":871},"end":{"line":16,"column":14,"offset":875},"indent":[]}}],"position":{"start":{"line":16,"column":9,"offset":870},"end":{"line":16,"column":64,"offset":925},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":862},"end":{"line":16,"column":64,"offset":925},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Prompt","position":{"start":{"line":18,"column":4,"offset":930},"end":{"line":18,"column":10,"offset":936},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":927},"end":{"line":18,"column":10,"offset":936},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Given an array of integers ","position":{"start":{"line":20,"column":1,"offset":938},"end":{"line":20,"column":28,"offset":965},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">arr</code>","position":{"start":{"line":20,"column":28,"offset":965},"end":{"line":20,"column":33,"offset":970},"indent":[]}},{"type":"text","value":" where each element is at most ","position":{"start":{"line":20,"column":33,"offset":970},"end":{"line":20,"column":64,"offset":1001},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">k</code>","position":{"start":{"line":20,"column":64,"offset":1001},"end":{"line":20,"column":67,"offset":1004},"indent":[]}},{"type":"text","value":" places away from its sorted position, write a function ","position":{"start":{"line":20,"column":67,"offset":1004},"end":{"line":20,"column":123,"offset":1060},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">sortKMessedArray</code>","position":{"start":{"line":20,"column":123,"offset":1060},"end":{"line":20,"column":141,"offset":1078},"indent":[]}},{"type":"text","value":" that sorts ","position":{"start":{"line":20,"column":141,"offset":1078},"end":{"line":20,"column":153,"offset":1090},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">arr</code>","position":{"start":{"line":20,"column":153,"offset":1090},"end":{"line":20,"column":158,"offset":1095},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":20,"column":158,"offset":1095},"end":{"line":20,"column":159,"offset":1096},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":938},"end":{"line":20,"column":159,"offset":1096},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Example","position":{"start":{"line":22,"column":4,"offset":1101},"end":{"line":22,"column":11,"offset":1108},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":1098},"end":{"line":22,"column":11,"offset":1108},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For an input array of size 10 and k = 2, an element belonging to index 6 in the sorted array will be located at either index 4, 5, 6, 7 or 8 in the input array.","position":{"start":{"line":24,"column":1,"offset":1110},"end":{"line":24,"column":161,"offset":1270},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":1110},"end":{"line":24,"column":161,"offset":1270},"indent":[]}},{"type":"html","lang":"js","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> k <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">sortKMessedArray</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span> <span class=\"token comment\">//output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></code></pre></div>","position":{"start":{"line":26,"column":1,"offset":1272},"end":{"line":30,"column":4,"offset":1402},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Approach","position":{"start":{"line":32,"column":4,"offset":1407},"end":{"line":32,"column":12,"offset":1415},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":1404},"end":{"line":32,"column":12,"offset":1415},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"An initial approach would be to sort the array using mergeSort or JavaScriptâ€™s sort method, in ","position":{"start":{"line":34,"column":1,"offset":1417},"end":{"line":34,"column":96,"offset":1512},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">nlog(n)</code>","position":{"start":{"line":34,"column":96,"offset":1512},"end":{"line":34,"column":105,"offset":1521},"indent":[]}},{"type":"text","value":" time. However, this would ignore that fact that the array is already mostly sorted (k-sorted), resulting in a less optimal solution.","position":{"start":{"line":34,"column":105,"offset":1521},"end":{"line":34,"column":238,"offset":1654},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":1417},"end":{"line":34,"column":238,"offset":1654},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Another approach utilizes the ","position":{"start":{"line":36,"column":1,"offset":1656},"end":{"line":36,"column":31,"offset":1686},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">k</code>","position":{"start":{"line":36,"column":31,"offset":1686},"end":{"line":36,"column":34,"offset":1689},"indent":[]}},{"type":"text","value":" values, by finding the minimum of the ","position":{"start":{"line":36,"column":34,"offset":1689},"end":{"line":36,"column":73,"offset":1728},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">k</code>","position":{"start":{"line":36,"column":73,"offset":1728},"end":{"line":36,"column":76,"offset":1731},"indent":[]}},{"type":"text","value":" values (a window of k values) in front of an element, and comparing its minimum to the element, swapping places if needed. This would be done in ","position":{"start":{"line":36,"column":76,"offset":1731},"end":{"line":36,"column":222,"offset":1877},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">O(nk)</code>","position":{"start":{"line":36,"column":222,"offset":1877},"end":{"line":36,"column":229,"offset":1884},"indent":[]}},{"type":"text","value":" time, since for every element in the n length array, you need to loop through ","position":{"start":{"line":36,"column":229,"offset":1884},"end":{"line":36,"column":308,"offset":1963},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">k</code>","position":{"start":{"line":36,"column":308,"offset":1963},"end":{"line":36,"column":311,"offset":1966},"indent":[]}},{"type":"text","value":" values to obtain the minimum. But we can do better.","position":{"start":{"line":36,"column":311,"offset":1966},"end":{"line":36,"column":363,"offset":2018},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":1656},"end":{"line":36,"column":363,"offset":2018},"indent":[]}},{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">k</code>","position":{"start":{"line":38,"column":1,"offset":2020},"end":{"line":38,"column":4,"offset":2023},"indent":[]}},{"type":"text","value":" provides a plus/minus deviation from the actual index, providing ","position":{"start":{"line":38,"column":4,"offset":2023},"end":{"line":38,"column":70,"offset":2089},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">2k + 1</code>","position":{"start":{"line":38,"column":70,"offset":2089},"end":{"line":38,"column":78,"offset":2097},"indent":[]}},{"type":"text","value":" options for every element. However, if we can guarantee that the first indexâ€™s value is sorted, then this becomes ","position":{"start":{"line":38,"column":78,"offset":2097},"end":{"line":38,"column":193,"offset":2212},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">k + 1</code>","position":{"start":{"line":38,"column":193,"offset":2212},"end":{"line":38,"column":200,"offset":2219},"indent":[]}},{"type":"text","value":" options for the next element. How can we guarantee that?","position":{"start":{"line":38,"column":200,"offset":2219},"end":{"line":38,"column":257,"offset":2276},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":2020},"end":{"line":38,"column":257,"offset":2276},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"â€˜Sliding Windowâ€™ Sub-Array","position":{"start":{"line":40,"column":5,"offset":2282},"end":{"line":40,"column":31,"offset":2308},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":2278},"end":{"line":40,"column":31,"offset":2308},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The 1st number in the array can be in any position from 0 to k, since there are no negative indices. ","position":{"start":{"line":42,"column":1,"offset":2310},"end":{"line":42,"column":102,"offset":2411},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":2310},"end":{"line":42,"column":102,"offset":2411},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Consider a sub-array of that length, ","position":{"start":{"line":44,"column":1,"offset":2413},"end":{"line":44,"column":38,"offset":2450},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">k + 1</code>","position":{"start":{"line":44,"column":38,"offset":2450},"end":{"line":44,"column":45,"offset":2457},"indent":[]}},{"type":"text","value":", filled with the first ","position":{"start":{"line":44,"column":45,"offset":2457},"end":{"line":44,"column":69,"offset":2481},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">k + 1</code>","position":{"start":{"line":44,"column":69,"offset":2481},"end":{"line":44,"column":76,"offset":2488},"indent":[]}},{"type":"text","value":" values in the array. You can sort the value into the first index correctly, since you know each element is within k indices of its final sorted index. We can then â€˜slideâ€™ the sub-array one index over and repeat to find the smallest element until the entire array has been traversed.","position":{"start":{"line":44,"column":76,"offset":2488},"end":{"line":44,"column":359,"offset":2771},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":2413},"end":{"line":44,"column":359,"offset":2771},"indent":[]}},{"type":"html","lang":"js","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> k <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> window <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//sub-array from index 0 of length K+1</span>\n<span class=\"token comment\">//Sort the first index</span>\nwindow <span class=\"token operator\">=</span>  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">//Now slide the window down 1 index to the right.</span>\nwindow <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">//repeat until the full array is traversed</span></code></pre></div>","position":{"start":{"line":46,"column":1,"offset":2773},"end":{"line":59,"column":4,"offset":3037},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This problem requires the output to be a sorted array from smallest to largest. In order to assume that this window will always be able to sort the smallest value, ","position":{"start":{"line":61,"column":1,"offset":3039},"end":{"line":61,"column":165,"offset":3203},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"insertion into this array also needs to be â€˜sortedâ€™ from the beginning","position":{"start":{"line":61,"column":166,"offset":3204},"end":{"line":61,"column":236,"offset":3274},"indent":[]}}],"position":{"start":{"line":61,"column":165,"offset":3203},"end":{"line":61,"column":237,"offset":3275},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":61,"column":237,"offset":3275},"end":{"line":61,"column":238,"offset":3276},"indent":[]}}],"position":{"start":{"line":61,"column":1,"offset":3039},"end":{"line":61,"column":238,"offset":3276},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Binary Heap","position":{"start":{"line":63,"column":5,"offset":3282},"end":{"line":63,"column":16,"offset":3293},"indent":[]}}],"position":{"start":{"line":63,"column":1,"offset":3278},"end":{"line":63,"column":16,"offset":3293},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A data structure that takes advantage of this insertion method is the ","position":{"start":{"line":65,"column":1,"offset":3295},"end":{"line":65,"column":71,"offset":3365},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">minimum heap</code>","position":{"start":{"line":65,"column":71,"offset":3365},"end":{"line":65,"column":85,"offset":3379},"indent":[]}},{"type":"text","value":". Heaps are a data structure that, like regular binary trees, will take in data and insert the node in the tree based on comparisons to the other nodeâ€™s values. In a minimum heap, the node parent is always smaller than its children, resulting in the smallest value being at the top of the heap.","position":{"start":{"line":65,"column":85,"offset":3379},"end":{"line":65,"column":379,"offset":3673},"indent":[]}}],"position":{"start":{"line":65,"column":1,"offset":3295},"end":{"line":65,"column":379,"offset":3673},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To apply this to the sliding window, we can create a minimum heap of size ","position":{"start":{"line":67,"column":1,"offset":3675},"end":{"line":67,"column":75,"offset":3749},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">k + 1</code>","position":{"start":{"line":67,"column":75,"offset":3749},"end":{"line":67,"column":82,"offset":3756},"indent":[]}},{"type":"text","value":", and fill it with the first ","position":{"start":{"line":67,"column":82,"offset":3756},"end":{"line":67,"column":111,"offset":3785},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">k + 1</code>","position":{"start":{"line":67,"column":111,"offset":3785},"end":{"line":67,"column":118,"offset":3792},"indent":[]}},{"type":"text","value":" elements of the array. Once the heap is built, take the minimum (i.e. the node at the top of the heap) out and place that back into the original array. Slide your sub-array one index over, add that new value to the heap, and again remove the new minimum to place back into the array. Repeat the process until you have traversed the entire array.","position":{"start":{"line":67,"column":118,"offset":3792},"end":{"line":67,"column":464,"offset":4138},"indent":[]}}],"position":{"start":{"line":67,"column":1,"offset":3675},"end":{"line":67,"column":464,"offset":4138},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To get the last elements out of the heap, the heap itself needs to be traversed to sort the remaining ","position":{"start":{"line":69,"column":1,"offset":4140},"end":{"line":69,"column":103,"offset":4242},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">k + 1</code>","position":{"start":{"line":69,"column":103,"offset":4242},"end":{"line":69,"column":110,"offset":4249},"indent":[]}},{"type":"text","value":" elements into the result array.","position":{"start":{"line":69,"column":110,"offset":4249},"end":{"line":69,"column":142,"offset":4281},"indent":[]}}],"position":{"start":{"line":69,"column":1,"offset":4140},"end":{"line":69,"column":142,"offset":4281},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Solution","position":{"start":{"line":71,"column":4,"offset":4286},"end":{"line":71,"column":12,"offset":4294},"indent":[]}}],"position":{"start":{"line":71,"column":1,"offset":4283},"end":{"line":71,"column":12,"offset":4294},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Sort Function","position":{"start":{"line":73,"column":5,"offset":4300},"end":{"line":73,"column":18,"offset":4313},"indent":[]}}],"position":{"start":{"line":73,"column":1,"offset":4296},"end":{"line":73,"column":18,"offset":4313},"indent":[]}},{"type":"html","lang":"js","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">sortKMessedArray</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> heapArr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MinHeap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token comment\">//iterate through the heapArr of k + 1 indices to guarantee the sorting of the *smallest* number.</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> k<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    heapArr<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">//iterate through the rest of the array and mutate the array from the beginning while changing the heap</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> k <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    arr<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> heapArr<span class=\"token punctuation\">.</span><span class=\"token function\">popMin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    heapArr<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">//iterate through the heap to sort the k + 1 remaining elements</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    arr<span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> heapArr<span class=\"token punctuation\">.</span><span class=\"token function\">popMin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":75,"column":1,"offset":4315},"end":{"line":96,"column":4,"offset":4952},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"MinHeap Constructor","position":{"start":{"line":98,"column":5,"offset":4958},"end":{"line":98,"column":24,"offset":4977},"indent":[]}}],"position":{"start":{"line":98,"column":1,"offset":4954},"end":{"line":98,"column":24,"offset":4977},"indent":[]}},{"type":"html","lang":"js","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">MinHeap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_heap <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nMinHeap<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getParent</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>childIdx<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>childIdx <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nMinHeap<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">insert</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_heap<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">heapifyUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nMinHeap<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">heapifyUp</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> currIdx <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_heap<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>currIdx <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_heap<span class=\"token punctuation\">[</span>currIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_heap<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getParent</span><span class=\"token punctuation\">(</span>currIdx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>currIdx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getParent</span><span class=\"token punctuation\">(</span>currIdx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    currIdx <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getParent</span><span class=\"token punctuation\">(</span>currIdx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nMinHeap<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">swap</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>idx1<span class=\"token punctuation\">,</span> idx2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_heap<span class=\"token punctuation\">[</span>idx1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_heap<span class=\"token punctuation\">[</span>idx2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_heap<span class=\"token punctuation\">[</span>idx2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_heap<span class=\"token punctuation\">[</span>idx1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nMinHeap<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">popMin</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> min <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_heap<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> lastValue <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_heap<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_heap<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_heap<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> lastValue<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">heapifyDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> min<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nMinHeap<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">heapifyDown</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> currIdx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getChildren</span><span class=\"token punctuation\">(</span>currIdx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> length <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_heap<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//'left' would always be filled before right, so to guarantee you stay in the while loop</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//if the right is ALSO filled</span>\n    <span class=\"token keyword\">let</span> idxSmaller <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      idxSmaller <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_heap<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_heap<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> left <span class=\"token punctuation\">:</span> right<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_heap<span class=\"token punctuation\">[</span>idxSmaller<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_heap<span class=\"token punctuation\">[</span>currIdx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>idxSmaller<span class=\"token punctuation\">,</span> currIdx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      currIdx <span class=\"token operator\">=</span> idxSmaller<span class=\"token punctuation\">;</span>\n      left <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getChildren</span><span class=\"token punctuation\">(</span>currIdx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      right <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getChildren</span><span class=\"token punctuation\">(</span>currIdx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nMinHeap<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getChildren</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>parentIdx<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> parentIdx <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> parentIdx <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":100,"column":1,"offset":4979},"end":{"line":160,"column":4,"offset":6586},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Complexity","position":{"start":{"line":162,"column":4,"offset":6591},"end":{"line":162,"column":14,"offset":6601},"indent":[]}}],"position":{"start":{"line":162,"column":1,"offset":6588},"end":{"line":162,"column":14,"offset":6601},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The time complexity taken here is ","position":{"start":{"line":164,"column":1,"offset":6603},"end":{"line":164,"column":35,"offset":6637},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">O(nlog(k))</code>","position":{"start":{"line":164,"column":35,"offset":6637},"end":{"line":164,"column":47,"offset":6649},"indent":[]}},{"type":"text","value":" time. Having to run through the array entirely requires ","position":{"start":{"line":164,"column":47,"offset":6649},"end":{"line":164,"column":104,"offset":6706},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">O(n)</code>","position":{"start":{"line":164,"column":104,"offset":6706},"end":{"line":164,"column":110,"offset":6712},"indent":[]}},{"type":"text","value":" time, and within each for-loop, inserting and deleting from a heap both take ","position":{"start":{"line":164,"column":110,"offset":6712},"end":{"line":164,"column":188,"offset":6790},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">O(log(k+1))</code>","position":{"start":{"line":164,"column":188,"offset":6790},"end":{"line":164,"column":201,"offset":6803},"indent":[]}},{"type":"text","value":" time, or ","position":{"start":{"line":164,"column":201,"offset":6803},"end":{"line":164,"column":211,"offset":6813},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">O(log(k))</code>","position":{"start":{"line":164,"column":211,"offset":6813},"end":{"line":164,"column":222,"offset":6824},"indent":[]}},{"type":"text","value":", resulting in an ","position":{"start":{"line":164,"column":222,"offset":6824},"end":{"line":164,"column":240,"offset":6842},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">O(nlog(k))</code>","position":{"start":{"line":164,"column":240,"offset":6842},"end":{"line":164,"column":252,"offset":6854},"indent":[]}},{"type":"text","value":" time complexity.","position":{"start":{"line":164,"column":252,"offset":6854},"end":{"line":164,"column":269,"offset":6871},"indent":[]}}],"position":{"start":{"line":164,"column":1,"offset":6603},"end":{"line":164,"column":269,"offset":6871},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The space complexity involved requires another array of length ","position":{"start":{"line":166,"column":1,"offset":6873},"end":{"line":166,"column":64,"offset":6936},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">k + 1</code>","position":{"start":{"line":166,"column":64,"offset":6936},"end":{"line":166,"column":71,"offset":6943},"indent":[]}},{"type":"text","value":", or ","position":{"start":{"line":166,"column":71,"offset":6943},"end":{"line":166,"column":76,"offset":6948},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">O(k)</code>","position":{"start":{"line":166,"column":76,"offset":6948},"end":{"line":166,"column":82,"offset":6954},"indent":[]}},{"type":"text","value":" space complexity.","position":{"start":{"line":166,"column":82,"offset":6954},"end":{"line":166,"column":100,"offset":6972},"indent":[]}}],"position":{"start":{"line":166,"column":1,"offset":6873},"end":{"line":166,"column":100,"offset":6972},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Credit/Inspiration","position":{"start":{"line":168,"column":4,"offset":6977},"end":{"line":168,"column":22,"offset":6995},"indent":[]}}],"position":{"start":{"line":168,"column":1,"offset":6974},"end":{"line":168,"column":22,"offset":6995},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This question is credited to PRAMP, with the heap constructor benefited from the priority queue REACTO problem from Fullstack Academy.","position":{"start":{"line":170,"column":1,"offset":6997},"end":{"line":170,"column":135,"offset":7131},"indent":[]}}],"position":{"start":{"line":170,"column":1,"offset":6997},"end":{"line":170,"column":135,"offset":7131},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"References","position":{"start":{"line":172,"column":4,"offset":7136},"end":{"line":172,"column":14,"offset":7146},"indent":[]}}],"position":{"start":{"line":172,"column":1,"offset":7133},"end":{"line":172,"column":14,"offset":7146},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/FullstackAcademy/technical-interview-prep/blob/master/algorithms/3-data-structures/1-priority-queue.md","children":[{"type":"text","value":"Priority Queue","position":{"start":{"line":174,"column":2,"offset":7149},"end":{"line":174,"column":16,"offset":7163},"indent":[]}}],"position":{"start":{"line":174,"column":1,"offset":7148},"end":{"line":174,"column":140,"offset":7287},"indent":[]}}],"position":{"start":{"line":174,"column":1,"offset":7148},"end":{"line":174,"column":140,"offset":7287},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.geeksforgeeks.org/heap-sort/","children":[{"type":"text","value":"HeapSort","position":{"start":{"line":176,"column":2,"offset":7290},"end":{"line":176,"column":10,"offset":7298},"indent":[]}}],"position":{"start":{"line":176,"column":1,"offset":7289},"end":{"line":176,"column":53,"offset":7341},"indent":[]}}],"position":{"start":{"line":176,"column":1,"offset":7289},"end":{"line":176,"column":53,"offset":7341},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":177,"column":1,"offset":7342}}}}